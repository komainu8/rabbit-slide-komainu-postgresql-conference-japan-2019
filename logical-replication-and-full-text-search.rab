= Amazon RDS+EC2+PGroonga+ロジカルレプリケーション\nを使った低コスト\n高速全文検索

: author
   堀本泰弘
: institution
   クリアコード
: content-source
   PostgreSQL Conference Japan 2019
: date
   2019-11-15
: start-time
   2019-11-15T14:10:00+09:00
: end-time
   2019-11-15T15:00:00+09:00
: theme
   .

= 目次

* 自己紹介
* Amazon RDSとは？
* PGroongaとは？
* AmazonRDS と PGroonga

= 目次

* RDS + EC2 + PGroonga構成
  * 構成図
  * 負荷分散
  * 復旧
  * 良い構成

= 自己紹介：名前と所属

* 名前：堀本 泰弘
* 所属：クリアコード

= 自己紹介：お仕事1

* 以下の全文検索エンジンの開発/サポート
  * Groonga, PGroonga, Mroonga, Rroonga
  * Groonga関連ツール

= Amazon RDSとは？

* クラウド上にRDBMSを構築
* 管理負担の軽減
  * 操作が簡単
  * 設定も最適化済み

= Amazon RDSとは？

* 設定パラメータ
  * 予め最適化
  * 作成後、数分でデータベースへの接続可

= Amazon RDSとは？

* パッチ
  * 自動適用
  * 常に最新版で動作
  * パッチ適用のタイミングを指定することも可能

= Amazon RDSとは？

* スケーラビリティ
  * CPUやメモリー
    * ワンタッチで実行可能
  * ストレージ
    * ダウンタイムなし実行可能

= Amazon RDSとは？

* バックアップ
  * 自動
* H/W障害
  * 故障したH/Wは自動的交換

= Amazon RDSとは？

* レプリケーション
  * 自動
  * フェイルオーバーは通常1〜2分
  * フェイルオーバーも自動で実施

= PGroongaとは？

* PostgreSQL経由で使える超高速な全文検索エンジン

= PGroongaとは？

  # image
  # src = Images/8.png
  # relative_height = 110

= PGroongaとは？

  # image
  # src = Images/9.png
  # relative_height = 110

= PGroongaとは？

* PostgreSQL経由で使える(=SQLで検索できる)
  * 実装コスト：小
  * メンテナンスコスト：小
  * LIKEも速くなる

= PGroongaとは？

実行例

= PGroongaとは？：\nテーブル定義

  # coderay sql

  CREATE TABLE entries (
    title text,
    content text
  );

= PGroongaとは？：\nインデックス定義

  # coderay sql

  -- 全文検索用インデックス
  CREATE INDEX entries_full_text_search
    ON entries
    --「USING PGroonga」=「PGroongaを使う」
    USING PGroonga (title, content);

= PGroongaとは？：\nデータ挿入

  # coderay sql

  -- 普通に挿入するだけでよい
  INSERT INTO entries
    VALUES ('PGroongaで高速全文検索！',
            '高速に全文検索したいですね！');

= PGroongaとは？：\n全文検索

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- &@~で全文検索
  -- 「検索」と「高速」をAND検索
      title &@~ '検索 高速' OR
      content &@~ '検索 高速';

= PGroongaとは？：\nLIKE

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- LIKEでもインデックスが効く
  --＝アプリを書き換えずに高速化可能
  -- ただし&@~より性能が落ちる
      title LIKE '%検索%' OR
      content LIKE '%検索%';

= PGroongaとは？：\n機能

* 本格的な全文検索エンジンをバックエンドで使用
  * 全文検索に十分な機能
    * 同義語検索
    * 類似文書検索
    * 読みがな検索 などなど

= PGroongaとは？：\n速度

* 検索が安定して速い
  * ヒット数が多くても、あまり速度が変わらない
  * 更新中でも検索が遅くならない
  * 更新されたデータは即検索できる

= PGroongaとは？：\nベンチマーク

  # image
  # src = Images/search-pgroonga-pg-bigm.pdf
  # relative_height = 100

= Amazon RDS と PGroonga

* Amazon RDSは管理コストを低減できる
* PGroongaは速くて機能が豊富

= Amazon RDS と PGroonga

* 組み合わせれば、運用が楽で高機能、高速な全文検索が実現！

= Amazon RDS と PGroonga

* しかし、RDSは自由に拡張機能をインストールできない
* 当然、PGroongaもRDS上では使えない

= Amazon RDS と PGroonga

* RDSにPGroongaをインストールせずに、RDSのメリットを活かす構成

= システム構成

以下の４つの要素を組み合わせる

* Amazon RDS
* Amazon EC2
* PGroonga
* ロジカルレプリケーション

= 構成図

  # image
  # src = Images/1.png
  # relative_height = 105

= Amazon RDSと\nAmazon EC2の役割

* RDSは更新専用
* EC2は検索専用

= PGroongaの\nインデックス設定

* ロジカルレプリケーション
  * DDLをレプリケーションしない
* この特徴を利用

= PGroongaの\nインデックス設定

* サブスクライバであるEC2にのみPGroonga拡張をインストール
* EC2にのみ全文検索用のインデックスを設定

= データの管理

* データは、RDSからロジカルレプリケーションで取得
  * RDS上にさえデータがあれば、EC2での検索が可能

= データの管理

* 逆に、RDSが保持しているデータがないと検索できない
  * RDSのデータは大切に守る必要がある
  * データはRDSにあるので、安全な管理は容易

= 負荷分散

* ここで紹介したのは、最もシンプルな構成

= 負荷分散

* 検索リクエストが増えてくるとEC2 1台ではリクエストが処理できない

= 負荷分散

* データはRDS上にある
* EC2へはロジカルレプリケーションでデータを同期

= 負荷分散

* つまり、新規にEC2インスタンスを作成\n →サブスクライバとしてRDSに接続\n →検索用のサーバーが完成

= 負荷分散

* EC2を増やすことで負荷を分散できる

= 負荷分散：構成

  # image
  # src = Images/2.png
  # relative_height = 105

= 復旧

* もしEC2へアクセス不能になったら？

= 復旧

* データはRDSにある
  * RDSにアクセスできるEC2を新しく作ればOK

= 復旧：メリット

* アクセス不能なEC2は破棄
  * 復旧をがんばらなくてよい

= 復旧：デメリット

* RDSに保持しているデータが増加
  * EC2の立ち上げに時間がかかる
  * レプリケーションに時間がかかるため

= デメリットの解消

* 新規のEC2が検索用サーバーとして稼働できるまでの間、他のEC2でリクエストを処理できるようにしておく

= ダメな例

  # image
  # src = Images/3.png
  # relative_height = 105

= ダメな例

  # image
  # src = Images/4.png
  # relative_height = 105

= ダメな例

* 1台でもアクセス不能\n=サービスの継続が難しくなる

= 良い例

  # image
  # src = Images/5.png
  # relative_height = 105

= 良い例

* 同時に2台アクセス不能になってもOK

= 良い例：1台故障

  # image
  # src = Images/6.png
  # relative_height = 105

= 良い例：1台故障

* 各サーバーのリソースにはまだ余裕がある

= 良い例：2台故障

  # image
  # src = Images/7.png
  # relative_height = 105

= 良い例：2台故障

* まだサービス不可能にはならない

= 良い構成：見積もり

* 良い構成を作るには？

= 良い構成：見積もり

* 1つの例
  * ある期間にどの程度システムが停止するかを見積もる

= 良い構成：見積もり

* 例えば...
  * サービス開始時間：1日
    * 新しくEC2を作成して、サービス開始できるまでの時間
  * 故障：1ヶ月に1回故障

= 良い構成：見積もり

* リクエスト：各EC2には均等にリクエストが振り分けられる
* サービス継続：EC2が3台あれば、サービスを提供可能

= 良い構成：見積もり

* EC2を3台で運用の場合
  * 1台でも故障するとサービス継続不可

= 良い構成：見積もり

* この場合の稼働率

  * MTBF = 365*24/12 = 730時間
  * MTTR = 24
  * 稼働率 = 730/754 =  0.9681697612732095 ≒96.8%

= 良い構成：見積もり

* つまり、この構成では、1ヶ月に1日程度システムが停止する

= 良い構成：見積もり

* では4台運用の場合はどうでしょう？

= 良い構成：見積もり

* 1台あたりの故障率=1-0.968=0.032
* 2台同時に故障する確率=0.032*0.032=0.001=0.1%

= 良い構成：見積もり

* したがって、1ヶ月に約45分程度システムが停止する

= 良い構成：見積もり

* 1ヶ月に1日の停止を問題ないとするか、問題とするかは提供するサービスによって異なる
* この方法では、算出した停止時間が許容できるくらい短くなるように構成を作るのが良い

= 最後に

* RDSにPGroongaがインストールできなくても、EC2とロジカルレプリケーションを使ってRDSのメリットを活かしつつ、高機能、高速な全文検索を実現する構成を紹介しました。

= 最後に

高速な全文検索をお求めの方は↓↓

問い合わせ先：

(('tag:x-small'))
((<"https://www.clear-code.com/contact/?type=groonga"|URL:https://www.clear-code.com/contact/?type=groonga>))

